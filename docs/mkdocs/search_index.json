{
    "docs": [
        {
            "location": "/",
            "text": "Coronium ChatterBox\n\n\nA Lua based chat/messaging server and client for use with \nCorona\n.\n\n\nAvailable for installation as a \nDigitalOcean\n droplet or \nAmamzon EC2\n instance.\n\n\n\n\nPlugin Required\n\n\nYou will need the \nCoronium ChatterBox Plugin\n available in the \nCorona Marketplace\n, in addition to a running server installation.",
            "title": "Introduction"
        },
        {
            "location": "/#coronium-chatterbox",
            "text": "A Lua based chat/messaging server and client for use with  Corona .  Available for installation as a  DigitalOcean  droplet or  Amamzon EC2  instance.   Plugin Required  You will need the  Coronium ChatterBox Plugin  available in the  Corona Marketplace , in addition to a running server installation.",
            "title": "Coronium ChatterBox"
        },
        {
            "location": "/install/digitalocean/",
            "text": "Coronium ChatterBox\n runs best on a \nDigitalOcean\n Ubuntu 17.04\n droplet.\n\n\n\n\nTip\n\n\nIf you're new to \nDigitalOcean\n please consider signing up with \nthis link\n. Not only will you receive a $10 credit (2 free months), but it also helps support the continued development, and testing of \nCoronium ChatterBox\n.\n\n\n\n\n\n\nScreencast\n\n\nView the installation instructions in a screencast format by \nclicking here\n.\n\n\n\n\nCreate A Droplet\n\n\nOnce you log into your \nDigitalOcean\n account, click the \nCreate\n button and select \nDroplets\n from the menu.\n\n\n\n\nOn the next screen, first select a \nUbuntu 17.04\n droplet distribution.\n\n\n \n\n\nSelect your preferred droplet size. A \n512MB/1 CPU\n droplet is a good starting point. You can always increase the size later.\n\n\n\n\nNext, select a region for the droplet. Consider choosing a location closest to your most active user base.\n\n\n\n\nSelect your SSH profile to attach to the droplet.\n\n\n\n\n\n\nCaution\n\n\nThere is an option where you can use a password instead of an SSH key, which may be easier if you're only testing \nCoronium ChatterBox\n, though I wouldn't recommend it. You can learn more about generating SSH keys for \nDigitalOcean\n here: \nCreating SSH Keys\n.\n\n\n\n\nNow give your droplet a hostname.\n\n\n\n\nBe sure to replace \ncbox.develephant.com\n with your own hostname.\n\n\n\n\nWarning\n\n\nDo not use \nchatterbox\n as your subdomain, or the server monitor will refuse to start. You can however use \nchatterbox-1\n, etc.\n\n\n\n\nAnd finally, click the \nCreate\n button to spin up the droplet.\n\n\n\n\nInstall ChatterBox\n\n\nOnce your droplet is done spinning up, note the ip address.\n\n\n\n\nUsing a terminal/shell of your choice, SSH into the droplet.\n\n\n\n\nTip\n\n\nYou can use the built in shells on both OSX and Linux. For Windows, check out \nPuTTY\n.\n\n\n\n\nssh root@<your-instance-ip>\n\n\n\n\n\nReplace \n<your-instance-ip>\n with the address that was assigned to your droplet.\n\n\nOnce you are connected to the droplet, copy and paste the following line into the terminal:\n\n\ncurl -LO https://s3.amazonaws.com/coronium-chatterbox/up.sh && sudo bash ./up.sh\n\n\nOnce the installation is complete, \nCoronium ChatterBox\n is ready for connections. Log out of the server by typing \nexit\n on the command line.\n\n\nYou can also run \nCoronium Chatterbox\n locally, with a standalone binary from the \nstandalone repository\n.",
            "title": "DigitalOcean"
        },
        {
            "location": "/install/digitalocean/#create-a-droplet",
            "text": "Once you log into your  DigitalOcean  account, click the  Create  button and select  Droplets  from the menu.   On the next screen, first select a  Ubuntu 17.04  droplet distribution.     Select your preferred droplet size. A  512MB/1 CPU  droplet is a good starting point. You can always increase the size later.   Next, select a region for the droplet. Consider choosing a location closest to your most active user base.   Select your SSH profile to attach to the droplet.    Caution  There is an option where you can use a password instead of an SSH key, which may be easier if you're only testing  Coronium ChatterBox , though I wouldn't recommend it. You can learn more about generating SSH keys for  DigitalOcean  here:  Creating SSH Keys .   Now give your droplet a hostname.   Be sure to replace  cbox.develephant.com  with your own hostname.   Warning  Do not use  chatterbox  as your subdomain, or the server monitor will refuse to start. You can however use  chatterbox-1 , etc.   And finally, click the  Create  button to spin up the droplet.",
            "title": "Create A Droplet"
        },
        {
            "location": "/install/digitalocean/#install-chatterbox",
            "text": "Once your droplet is done spinning up, note the ip address.   Using a terminal/shell of your choice, SSH into the droplet.   Tip  You can use the built in shells on both OSX and Linux. For Windows, check out  PuTTY .   ssh root@<your-instance-ip>  Replace  <your-instance-ip>  with the address that was assigned to your droplet.  Once you are connected to the droplet, copy and paste the following line into the terminal:  curl -LO https://s3.amazonaws.com/coronium-chatterbox/up.sh && sudo bash ./up.sh  Once the installation is complete,  Coronium ChatterBox  is ready for connections. Log out of the server by typing  exit  on the command line.  You can also run  Coronium Chatterbox  locally, with a standalone binary from the  standalone repository .",
            "title": "Install ChatterBox"
        },
        {
            "location": "/install/ec2/",
            "text": "Coronium ChatterBox\n is eligible for the EC2 free tier using Amazon Web Services.\n\n\n\n\nPrerequisites\n\n\nThis guide assumes that you have an active AWS account, and are familiar with managing EC2 instances.\n\n\n\n\n\n\nScreencast\n\n\nView the installation instructions in a screencast format by \nclicking here\n.\n\n\n\n\nCreate An Instance\n\n\nOnce you log into the \nAWS Console\n, navigate to the \nEC2\n service. Click the \nLaunch Instance\n button.\n\n\nOn the next screen, find the \nUbuntu Server 16.04 LTS (HVM)\n AMI, and click the \nSelect\n button on the right.\n\n\nSelect your preferred instance type. A \nt2.micro\n is a good starting point. You can always increase the size later.\n\n\nClick the \nAdd Rule\n button on the \nConfigure Security Group\n screen, and add the following:\n\n\n\n\n\n\n\n\nType\n\n\nProtocol\n\n\nPort Range\n\n\nSource\n\n\n\n\n\n\n\n\n\n\nCustom TCP\n\n\nTCP\n\n\n7175\n\n\nAnywhere\n\n\n\n\n\n\n\n\nAdjust any additional settings, and then \nLaunch\n the AMI.\n\n\nInstall ChatterBox\n\n\nOnce your instance is in a \nrunning\n state, note the \nIPv4 Public IP\n address.\n\n\nUsing a terminal/shell of your choice, SSH into the instance.\n\n\n\n\nTip\n\n\nYou can use the built in shells on both OSX and Linux. For Windows, check out \nPuTTY\n.\n\n\n\n\nssh -i <path/to/.pem> ubuntu@<your-instance-ip>\n\n\n\n\n\nReplace \n<your-instance-ip>\n with the address that was assigned to your instance.\n\n\nOnce you are connected to the droplet, copy and paste the following line into the terminal:\n\n\ncurl -LO https://s3.amazonaws.com/coronium-chatterbox/ami.sh && sudo bash ./ami.sh\n\n\nOnce the installation is complete, \nCoronium ChatterBox\n is ready for action. Log out of the server by typing \nexit\n on the command line.",
            "title": "Amazon EC2"
        },
        {
            "location": "/install/ec2/#create-an-instance",
            "text": "Once you log into the  AWS Console , navigate to the  EC2  service. Click the  Launch Instance  button.  On the next screen, find the  Ubuntu Server 16.04 LTS (HVM)  AMI, and click the  Select  button on the right.  Select your preferred instance type. A  t2.micro  is a good starting point. You can always increase the size later.  Click the  Add Rule  button on the  Configure Security Group  screen, and add the following:     Type  Protocol  Port Range  Source      Custom TCP  TCP  7175  Anywhere     Adjust any additional settings, and then  Launch  the AMI.",
            "title": "Create An Instance"
        },
        {
            "location": "/install/ec2/#install-chatterbox",
            "text": "Once your instance is in a  running  state, note the  IPv4 Public IP  address.  Using a terminal/shell of your choice, SSH into the instance.   Tip  You can use the built in shells on both OSX and Linux. For Windows, check out  PuTTY .   ssh -i <path/to/.pem> ubuntu@<your-instance-ip>  Replace  <your-instance-ip>  with the address that was assigned to your instance.  Once you are connected to the droplet, copy and paste the following line into the terminal:  curl -LO https://s3.amazonaws.com/coronium-chatterbox/ami.sh && sudo bash ./ami.sh  Once the installation is complete,  Coronium ChatterBox  is ready for action. Log out of the server by typing  exit  on the command line.",
            "title": "Install ChatterBox"
        },
        {
            "location": "/install/testing/",
            "text": "Test the server connection by using \ntelnet\n on your local command prompt:\n\n\ntelnet <your-instance-ip> 7175\n\n\n\n\n\nThe server should respond with a \"handshake\" prompt:\n\n\n{\"_handshake\":1}\n\n\n\n\n\n\n\nTip\n\n\nThe server will disconnect any client who does not properly respond to a handshake request after 5 seconds.",
            "title": "Quick Test"
        },
        {
            "location": "/server/config/",
            "text": "After the \nCoronium ChatterBox\n server is installed, you can change the configuration which the plugin uses to connect to your instance.\n\n\nThe following configuration options are available to set on the server-side:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nThe client connection key.\n\n\n\"8477ebc412386117059664d45637e397\"\n\n\n\n\n\n\nport\n\n\nThe port that the client connects to.\n\n\n7175\n\n\n\n\n\n\nroom\n\n\nThe default room the client joins, if not provided.\n\n\n\"Lobby\"\n\n\n\n\n\n\ntimeout\n\n\nThe global client timeout setting, in seconds.\n\n\n900 (15 min)\n\n\n\n\n\n\n\n\nKey\n\n\nTo help protect from errant client connections, the server contains a key that must be matched with client connection call. If the key is incorrect or not provided, the connection will be closed. There is a default key baked into the client and the server, but you should change this at your convienence.\n\n\n\n\nImportant\n\n\nOnce you change the server key, make sure to also update your client connection method by passing the \nkey\n parameter, or you won't be able to connect. See \nConnecting The Client\n.\n\n\n\n\nPort\n\n\nBy default the server will listen for new connections on port 7175, you can change this option as desired.\n\n\n\n\nImportant\n\n\nOnce you change the server port, make sure to also update your client connection method by passing the \nport\n parameter, or you won't be able to connect. See \nConnecting The Client\n.\n\n\n\n\nRoom\n\n\nWhen a client connection is confirmed, they will be added to the default room \nLobby\n. You can change this value to make the default something different.\n\n\nTimeout\n\n\nClient connection timeouts are managed on the server-side. By default a client will be disconnected after being idle for 15 minutes. This option can be set to 0 to disable the timeout.\n\n\n\n\nWarning\n\n\nWhile you can disable the client timeout by provding a 0 as a config value, you run the risk of have a client \"hang\" or in other cases an errant client that takes up one of the servers connections. \nDisabling the timeout is not recommended\n.\n\n\n\n\n\n\nconfig.lua\n\n\nTo update the configuration file, log in with the \ncoronium\n user:\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nOpen the \nconfig.lua\n using the \nnano\n file editor:\n\n\nnano ~/config.lua\n\n\n\n\n\nYou should see the following default content in the \nconfig.lua\n file:\n\n\nreturn \n{\n  key = \"8477ebc412386117059664d45637e397\",\n  port = 7175,\n  room = \"Lobby\",\n  timeout = 900 --secs\n}\n\n\n\n\n\nUse the arrow keys to move the cursor, and replace the values as needed:\n\n\nreturn \n{\n  key = \"12345abcdef\",\n  port = 7175,\n  room = \"Lobby\",\n  timeout = 900 --secs\n}\n\n\n\n\n\nWhen your changes have been made, use \ncontrol-x\n , then press \ny\n, and then press enter, to save the changes.\n\n\nReload the \nchatterbox\n process to pick up the new configuration:\n\n\nsudo monit restart chatterbox\n\n\n\n\n\nClose the shell connection with:\n\n\nexit\n\n\n\n\n\n\n\nNote\n\n\nAny changed values will need to be added/updated in the plugin \nconnect\n method as well. See \nConnecting\n.",
            "title": "Configuration"
        },
        {
            "location": "/server/config/#key",
            "text": "To help protect from errant client connections, the server contains a key that must be matched with client connection call. If the key is incorrect or not provided, the connection will be closed. There is a default key baked into the client and the server, but you should change this at your convienence.   Important  Once you change the server key, make sure to also update your client connection method by passing the  key  parameter, or you won't be able to connect. See  Connecting The Client .",
            "title": "Key"
        },
        {
            "location": "/server/config/#port",
            "text": "By default the server will listen for new connections on port 7175, you can change this option as desired.   Important  Once you change the server port, make sure to also update your client connection method by passing the  port  parameter, or you won't be able to connect. See  Connecting The Client .",
            "title": "Port"
        },
        {
            "location": "/server/config/#room",
            "text": "When a client connection is confirmed, they will be added to the default room  Lobby . You can change this value to make the default something different.",
            "title": "Room"
        },
        {
            "location": "/server/config/#timeout",
            "text": "Client connection timeouts are managed on the server-side. By default a client will be disconnected after being idle for 15 minutes. This option can be set to 0 to disable the timeout.   Warning  While you can disable the client timeout by provding a 0 as a config value, you run the risk of have a client \"hang\" or in other cases an errant client that takes up one of the servers connections.  Disabling the timeout is not recommended .",
            "title": "Timeout"
        },
        {
            "location": "/server/config/#configlua",
            "text": "To update the configuration file, log in with the  coronium  user:  ssh coronium@<your-instance-ip>  Open the  config.lua  using the  nano  file editor:  nano ~/config.lua  You should see the following default content in the  config.lua  file:  return \n{\n  key = \"8477ebc412386117059664d45637e397\",\n  port = 7175,\n  room = \"Lobby\",\n  timeout = 900 --secs\n}  Use the arrow keys to move the cursor, and replace the values as needed:  return \n{\n  key = \"12345abcdef\",\n  port = 7175,\n  room = \"Lobby\",\n  timeout = 900 --secs\n}  When your changes have been made, use  control-x  , then press  y , and then press enter, to save the changes.  Reload the  chatterbox  process to pick up the new configuration:  sudo monit restart chatterbox  Close the shell connection with:  exit   Note  Any changed values will need to be added/updated in the plugin  connect  method as well. See  Connecting .",
            "title": "config.lua"
        },
        {
            "location": "/server/logs/",
            "text": "To view the log file, connect to the instance with the \ncoronium\n user.\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nTo watch the log in real-time:\n\n\ntail -f ~/logs/chatterbox.log\n\n\n\n\n\nPress \ncontrol-x\n to stop watching the log file.\n\n\n\n\nNote\n\n\nThe log file is managed automatically, and will be \"rotated\" once it exceeds a certain size limit.",
            "title": "Viewing Logs"
        },
        {
            "location": "/server/password/",
            "text": "The default password for a fresh install is: \ncoroniumadmin\n.\n\n\n\n\nWarning\n\n\nYou should change the default password after the install.\n\n\n\n\nLog in with the \ncoronium\n user:\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nUse the following command to change the password:\n\n\nsudo passwd coronium\n\n\n\n\n\nAnd then follow the prompts.\n\n\nWhen you are finished, close the connection:\n\n\nexit",
            "title": "Password"
        },
        {
            "location": "/server/system/",
            "text": "When your \nCoronium ChatterBox\n server starts, its monitored by a utility called \nMonit\n, which makes sure that the \nchatterbox\n process is active. In the event that the process runs into an issue or crashes, it will be restarted shortly.\n\n\nIn the rare case where you need to manually stop or start the process, log in using the \ncoronium\n user.\n\n\nssh coronium@<your-instance-ip>\n\n\n\n\n\nTo stop the process, on the command line, enter:\n\n\nsudo monit stop chatterbox\n\n\n\n\n\nTo start the process, use:\n\n\nsudo monit start chatterbox\n\n\n\n\n\n\n\nCaution\n\n\nYou should rarely need to manually control the \nchatterbox\n process.",
            "title": "System Service"
        },
        {
            "location": "/client/plugin/",
            "text": "Get The Plugin\n\n\nIf you don't already have it, get the \nCoronium Chatterbox Plugin\n from the \nCorona Marketplace\n.\n\n\nAdding The Plugin\n\n\nAdd the plugin by adding an entry to the \nplugins\n table of \nbuild.settings\n file:\n\n\nsettings =\n{\n    plugins =\n    {\n        [\"plugin.chatterbox\"] =\n        {\n            publisherId = \"com.develephant\"\n        },\n    },\n}\n\n\n\n\n\nOpen your \nmain.lua\n file and add the following:\n\n\nlocal\n \ncb\n \n=\n \nrequire\n(\n'plugin.chatterbox'\n)\n\n\n\n\n\n\n\n\nNote\n\n\nIf you are using Composer you may want to add this elsewhere.",
            "title": "Plugin"
        },
        {
            "location": "/client/plugin/#get-the-plugin",
            "text": "If you don't already have it, get the  Coronium Chatterbox Plugin  from the  Corona Marketplace .",
            "title": "Get The Plugin"
        },
        {
            "location": "/client/plugin/#adding-the-plugin",
            "text": "Add the plugin by adding an entry to the  plugins  table of  build.settings  file:  settings =\n{\n    plugins =\n    {\n        [\"plugin.chatterbox\"] =\n        {\n            publisherId = \"com.develephant\"\n        },\n    },\n}  Open your  main.lua  file and add the following:  local   cb   =   require ( 'plugin.chatterbox' )    Note  If you are using Composer you may want to add this elsewhere.",
            "title": "Adding The Plugin"
        },
        {
            "location": "/client/connect/",
            "text": "To connect to your \nCoronium Chatterbox\n instance, you will first need your IP address (see \nInstallation\n) then add the following:\n\n\n\n\nNote\n\n\nThe code below shows the minimum parameters needed to connect to a fresh \nCoronium Chatterbox\n instance.\n\n\n\n\ncb\n:\nconnect\n({\n\n  \nhost\n \n=\n \n'<your-ip-address>'\n,\n\n  \nname\n \n=\n \n'Sandy'\n\n\n})\n\n\n\n\n\n\nExample\n\n\nlocal\n \ncb\n \n=\n \nrequire\n(\n'plugin.chatterbox'\n)\n\n\n\nlocal\n \nfunction\n \nonConnect\n()\n\n  \nprint\n(\n'connected'\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonClosed\n()\n\n  \nprint\n(\n'disconnected'\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonError\n(\nevt\n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nend\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnConnect'\n,\n \nonConnect\n)\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnClosed'\n,\n \nonClosed\n)\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnError'\n,\n \nonError\n)\n\n\n\ncb\n:\nconnect\n({\n\n  \nhost\n \n=\n \n'<your-ip-address>'\n\n  \nname\n \n=\n \n'Sandy'\n\n\n})\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nhost\n\n\nThe instance address.\n\n\nY\n\n\n\n\n\n\nname\n\n\nThe client display name.\n\n\nY\n\n\n\n\n\n\nport\n\n\nThe instance port.\n\n\nN\n\n\n\n\n\n\nkey\n\n\nThe authentication key.\n\n\nN\n\n\n\n\n\n\nroom\n\n\nThe initial room to connect to.\n\n\nN\n\n\n\n\n\n\ndebug\n\n\nOutput client-side debugging info.\n\n\nN\n\n\n\n\n\n\n\n\nSee also:\n \nServer Configuration\n.",
            "title": "Connecting"
        },
        {
            "location": "/client/connect/#example",
            "text": "local   cb   =   require ( 'plugin.chatterbox' )  local   function   onConnect () \n   print ( 'connected' )  end  local   function   onClosed () \n   print ( 'disconnected' )  end  local   function   onError ( evt ) \n   if   evt . error   then \n     print ( evt . error ) \n   end  end  cb . events : addEventListener ( 'OnConnect' ,   onConnect )  cb . events : addEventListener ( 'OnClosed' ,   onClosed )  cb . events : addEventListener ( 'OnError' ,   onError )  cb : connect ({ \n   host   =   '<your-ip-address>' \n   name   =   'Sandy'  })",
            "title": "Example"
        },
        {
            "location": "/client/connect/#parameters",
            "text": "Parameter  Description  Required      host  The instance address.  Y    name  The client display name.  Y    port  The instance port.  N    key  The authentication key.  N    room  The initial room to connect to.  N    debug  Output client-side debugging info.  N     See also:   Server Configuration .",
            "title": "Parameters"
        },
        {
            "location": "/client/overview/",
            "text": "Being a real-time client, you will use event listeners to respond to events sent from the \nCoronium Chatterbox\n instance. You can learn more about the events received in \nClient Events\n.\n\n\nRooms\n\n\nCoronium Chatterbox\n allows you to group clients into \"rooms\" of your choosing. Using the \njoinRoom\n action you can switch between rooms. By default, the client is connected to the \"Lobby\" room. If you want to join a different room when connecting, supply the \nroom\n parameter to the \ncs:connect\n method (see \nConnecting The Client\n).\n\n\nWhen a client joins a new room, they are automatically removed from the previous room they were in. A client can only be a member of one room at any given time.\n\n\nAt anytime a client joins a room , a \nOnJoined\n event will be triggered in the room with the newly joined members information. \nThe joining client also receives this message\n.\n\n\nIf a user leaves a room, the \nOnLeft\n event is triggered in the room. The leaving client will not receive this message.\n\n\n\n\nTip\n\n\nWhenever a client joins or leaves a room (or changes their name), an \nOnClientList\n event will be triggered. This is a good time to store and update your client display list.\n\n\n\n\nTo retrieve a list of the active rooms on your \nCoronium Chatterbox\n instance use the \ngetRooms\n action along with the \nOnRoomList\n event. \n\n\nClient List\n\n\nThe client list is broadcast to the room on any \nOnJoined\n, \nOnLeft\n, or \nOnNameChange\n event. You can use this list to create a user display component, and to also gather the ID needed for the \nsendWhisper\n action. To listen for the client list use the \nOnClientList\n event.\n\n\nMessages\n\n\nThe client can send (and receive) three different types of messages; a \"room\" message, a \"private\" message, and a \"system\" message.\n\n\nRoom Message\n\n\nA room message is sent using the \nsendMessage\n action. This message type is broadcast to all members of the current room the client is in. You can receive this message type using the \nOnMessage\n event. This message type works well for chat messaging.\n\n\n\n\nImportant\n\n\nAll clients in the room receive this message type, including the client sending the message.\n\n\n\n\nPrivate Message\n\n\nYou can send a message directly to any user in the room using the \nsendWhisper\n action. This message type is sent directly to the recipient. It is not broadcast into the room. To send a \"whisper\" you need to supply the recipient ID. You can get ahold of these ids within the \nOnClientList\n event.\n\n\nSystem Message\n\n\nTo send control type messages within the room, you can use a \"system\" message. This message type is broadcast to the room, and can be captured outside of your \"chat\" layer. To receive these use the \nOnSystemMessage\n event.\n\n\nSystem messages can be used for controlling aspects of your application state. For example, opening a webview with a passed url.\n\n\n\n\nImportant\n\n\nAll clients in the room receive this message type, including the client sending the message.\n\n\n\n\nStatus Events\n\n\nTo listen for error events from both the \nCoronium Chatterbox\n instance, as well as, the local client use the \nOnError\n event.\n\n\nTo listen for client timeout (if any) use the \nOnTimeout\n event.\n\n\nTo listen for the client disconnecting from the instance, use the \nOnClosed\n event.",
            "title": "Overview"
        },
        {
            "location": "/client/overview/#rooms",
            "text": "Coronium Chatterbox  allows you to group clients into \"rooms\" of your choosing. Using the  joinRoom  action you can switch between rooms. By default, the client is connected to the \"Lobby\" room. If you want to join a different room when connecting, supply the  room  parameter to the  cs:connect  method (see  Connecting The Client ).  When a client joins a new room, they are automatically removed from the previous room they were in. A client can only be a member of one room at any given time.  At anytime a client joins a room , a  OnJoined  event will be triggered in the room with the newly joined members information.  The joining client also receives this message .  If a user leaves a room, the  OnLeft  event is triggered in the room. The leaving client will not receive this message.   Tip  Whenever a client joins or leaves a room (or changes their name), an  OnClientList  event will be triggered. This is a good time to store and update your client display list.   To retrieve a list of the active rooms on your  Coronium Chatterbox  instance use the  getRooms  action along with the  OnRoomList  event.",
            "title": "Rooms"
        },
        {
            "location": "/client/overview/#client-list",
            "text": "The client list is broadcast to the room on any  OnJoined ,  OnLeft , or  OnNameChange  event. You can use this list to create a user display component, and to also gather the ID needed for the  sendWhisper  action. To listen for the client list use the  OnClientList  event.",
            "title": "Client List"
        },
        {
            "location": "/client/overview/#messages",
            "text": "The client can send (and receive) three different types of messages; a \"room\" message, a \"private\" message, and a \"system\" message.  Room Message  A room message is sent using the  sendMessage  action. This message type is broadcast to all members of the current room the client is in. You can receive this message type using the  OnMessage  event. This message type works well for chat messaging.   Important  All clients in the room receive this message type, including the client sending the message.   Private Message  You can send a message directly to any user in the room using the  sendWhisper  action. This message type is sent directly to the recipient. It is not broadcast into the room. To send a \"whisper\" you need to supply the recipient ID. You can get ahold of these ids within the  OnClientList  event.  System Message  To send control type messages within the room, you can use a \"system\" message. This message type is broadcast to the room, and can be captured outside of your \"chat\" layer. To receive these use the  OnSystemMessage  event.  System messages can be used for controlling aspects of your application state. For example, opening a webview with a passed url.   Important  All clients in the room receive this message type, including the client sending the message.",
            "title": "Messages"
        },
        {
            "location": "/client/overview/#status-events",
            "text": "To listen for error events from both the  Coronium Chatterbox  instance, as well as, the local client use the  OnError  event.  To listen for client timeout (if any) use the  OnTimeout  event.  To listen for the client disconnecting from the instance, use the  OnClosed  event.",
            "title": "Status Events"
        },
        {
            "location": "/events/",
            "text": "Event Table\n\n\nA complete listing of Coronium ChatterBox events:\n\n\n\n\n\n\n\n\nEvent Name\n\n\nDescription\n\n\nScope\n\n\n\n\n\n\n\n\n\n\nOnConnect\n\n\nThe client has connected to the server.\n\n\nclient\n\n\n\n\n\n\nOnJoined\n\n\nA client has joined the current room.\n\n\nroom\n\n\n\n\n\n\nOnLeft\n\n\nA client has left the current room.\n\n\nroom\n\n\n\n\n\n\nOnMessage\n\n\nA room message has been received.\n\n\nroom\n\n\n\n\n\n\nOnWhisper\n\n\nA private message has been received.\n\n\nclient\n\n\n\n\n\n\nOnSystemMessage\n\n\nA system message has been received.\n\n\nroom\n\n\n\n\n\n\nOnClientList\n\n\nThe client list of the current room.\n\n\nroom\n\n\n\n\n\n\nOnRoomList\n\n\nA list of rooms active on the server.\n\n\nclient\n\n\n\n\n\n\nOnNameChange\n\n\nA client has changed their name.\n\n\nroom\n\n\n\n\n\n\nOnUnknownEvent\n\n\nAn unknown event has been received.\n\n\nclient\n\n\n\n\n\n\nOnClosed\n\n\nThe client has disconnected from the server.\n\n\nclient\n\n\n\n\n\n\nOnTimeout\n\n\nThe client connection has timed out.\n\n\nclient\n\n\n\n\n\n\nOnError\n\n\nThe client has received an error message.\n\n\nclient\n\n\n\n\n\n\n\n\n\n\nEvent Listeners\n\n\nTo listen for events, add an event listener:\n\n\nlocal\n \nfunction\n \nonMessage\n(\n \nevt\n \n)\n\n  \nprint\n(\nevt\n.\ndata\n.\nname\n,\n \nevt\n.\ndata\n.\nmsg\n)\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnMessage'\n,\n \nonMessage\n)\n\n\n\n\n\n\n\n\nNote\n\n\nAll event properties can be found on the \ndata\n object of the event (\nevt.data.<prop>\n). See the following event details for their available properties.\n\n\n\n\n\n\nOnClientList\n\n\nThe client has received the client list for the current room.\n\n\nData Properties\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nclients\n\n\nA table array of clients.\n\n\nTable\n\n\n\n\n\n\ncnt\n\n\nThe client list count.\n\n\nNumber\n\n\n\n\n\n\nroom\n\n\nThe current room name.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \nonClientList\n(\n \nevt\n \n)\n\n  \nprint\n(\n'client count:'\n..\nevt\n.\ndata\n.\ncnt\n)\n\n  \nlocal\n \nclients\n \n=\n \nevt\n.\ndata\n.\nclients\n\n  \nfor\n \ni\n=\n1\n,\n \n#\nclients\n \ndo\n\n    \nlocal\n \nclient\n \n=\n \nclients\n[\ni\n]\n\n    \nprint\n(\nclient\n.\nname\n,\n \nclient\n.\nid\n)\n\n  \nend\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnClientList'\n,\n \nonClientList\n)\n\n\n\n\n\n\n\n\nOnClosed\n\n\nThe client has been disconnected from the server.\n\n\nData Properties\n\n\nThis event has no available properties.\n\n\nlocal\n \nfunction\n \nonClosed\n()\n\n  \nprint\n(\n'Client has disconnected from the server'\n)\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnClosed'\n,\n \nonClosed\n)\n\n\n\n\n\n\n\n\nOnConnect\n\n\nThe client has connected to the server.\n\n\nData Properties\n\n\nThis event has no available properties.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonConnect\n()\n\n  \nprint\n(\n'Client has successfully connected to the server'\n)\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnConnect'\n,\n \nonConnect\n)\n\n\n\n\n\n\n\n\nOnError\n\n\nThe client has received an error message.\n\n\n\n\nNote\n\n\nThe \nOnError\n event triggers on both local and server-side errors.\n\n\n\n\n\n\nImportant\n\n\nThe \nOnError\n event does not contain a \ndata\n property. To access the error, use the \nerror\n key directly on the event: \nevt.error\n.\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \nOnError\n(\n \nevt\n \n)\n\n  \nprint\n(\n'Client Error: '\n..\nevt\n.\nerror\n)\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnError'\n,\n \nonError\n)\n\n\n\n\n\n\n\n\nOnJoined\n\n\nA client has joined the current room.\n\n\nData Properties\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nname\n\n\nName of the joining client.\n\n\nString\n\n\n\n\n\n\nid\n\n\nUnique ID of the client.\n\n\nString\n\n\n\n\n\n\nroom\n\n\nThe current room name.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \nonJoined\n(\n \nevt\n \n)\n\n  \nprint\n(\nevt\n.\ndata\n.\nname\n,\n \nevt\n.\ndata\n.\nid\n,\n \nevt\n.\ndata\n.\nroom\n)\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnJoined'\n,\n \nonJoined\n)\n\n\n\n\n\n\n\n\nOnLeft\n\n\nA client has left the current room.\n\n\nData Properties\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nname\n\n\nName of the joining client.\n\n\nString\n\n\n\n\n\n\nid\n\n\nUnique ID of the client.\n\n\nString\n\n\n\n\n\n\nroom\n\n\nThe current room name.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \nonLeft\n(\n \nevt\n \n)\n\n  \nprint\n(\nevt\n.\ndata\n.\nname\n,\n \nevt\n.\ndata\n.\nid\n,\n \nevt\n.\ndata\n.\nroom\n)\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnLeft'\n,\n \nonLeft\n)\n\n\n\n\n\n\n\n\nOnMessage\n\n\nA room message has been received.\n\n\nData Properties\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nname\n\n\nName of the sender.\n\n\nString\n\n\n\n\n\n\nid\n\n\nUnique ID of the sender.\n\n\nString\n\n\n\n\n\n\nmsg\n\n\nThe message content.\n\n\nString\n\n\n\n\n\n\nroom\n\n\nThe current room name.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \nonMessage\n(\n \nevt\n \n)\n\n  \nprint\n(\nevt\n.\ndata\n.\nname\n,\n \nevt\n.\ndata\n.\nmsg\n)\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnMessage'\n,\n \nonMessage\n)\n\n\n\n\n\n\n\n\nOnNameChange\n\n\nA client has changed their display name.\n\n\n\n\nNote\n\n\nAfter this event is received an \nOnClientList\n event will follow with the updated name, allowing for easy updating of the client display list.\n\n\n\n\nData Properties\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nname\n\n\nNew name of the client.\n\n\nString\n\n\n\n\n\n\nold_name\n\n\nPrevious name of the client.\n\n\nString\n\n\n\n\n\n\nid\n\n\nUnique ID of the client.\n\n\nString\n\n\n\n\n\n\nroom\n\n\nThe current room name.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \nonNameChange\n(\n \nevt\n \n)\n\n  \nprint\n(\n'Old name was: '\n..\nevt\n.\ndata\n.\nold_name\n)\n\n  \nprint\n(\n'New name is: '\n..\nevt\n.\ndata\n.\nname\n)\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnNameChange'\n,\n \nonNameChange\n)\n\n\n\n\n\n\n\n\nOnRoomList\n\n\nA list of active rooms on the server.\n\n\nData Properties\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nrooms\n\n\nA table array of rooms names.\n\n\nString\n\n\n\n\n\n\ncnt\n\n\nThe client list count.\n\n\nString\n\n\n\n\n\n\nroom\n\n\nThe current room name.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \nonRoomList\n(\n \nevt\n \n)\n\n  \nprint\n(\n'room count:'\n..\nevt\n.\ndata\n.\ncnt\n)\n\n  \nlocal\n \nrooms\n \n=\n \nevt\n.\ndata\n.\nrooms\n\n  \nfor\n \ni\n=\n1\n,\n \n#\nrooms\n \ndo\n\n    \nprint\n(\nrooms\n[\ni\n].\nname\n)\n\n  \nend\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'onRoomList'\n,\n \nonRoomList\n)\n\n\n\n\n\n\n\n\nOnSystemMessage\n\n\nA system message has been received.\n\n\n\n\nNote\n\n\nA system message can be used to broadcast a message for service related events outside of the \"chat\" layer.\n\n\n\n\nData Properties\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\naction\n\n\nThe system event action ID.\n\n\nString\n\n\n\n\n\n\npayload\n\n\nThe system event payload.\n\n\nTable\n\n\n\n\n\n\nroom\n\n\nThe current room name.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \nonSystemMessage\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\ndata\n.\naction\n \n==\n \n'player_turn'\n \nthen\n\n    \nprint\n(\n'players turn is: '\n..\nevt\n.\ndata\n.\npayload\n)\n\n  \nend\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnSystemMessage'\n,\n \nonSystemMessage\n)\n\n\n\n\n\n\n\n\nOnTimeout\n\n\nThe client has timed out.\n\n\n\n\nImportant\n\n\nThe timeout event is only a status message and does not disconnect the client. When the client receives this message you should use the \ndisconnect\n action to close the connection, if wanted.\n\n\n\n\nData Properties\n\n\nThis event has no available properties.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonTimeout\n()\n\n  \nprint\n(\n'The client has timed out'\n)\n\n\n  \n--if you'd like to disconnect on a timeout event:\n\n  \ncs\n:\ndisconnect\n()\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnTimeout'\n,\n \nonTimeout\n)\n\n\n\n\n\n\n\n\nOnUnknownEvent\n\n\nAn unknown event type was received by the client.\n\n\n\n\nCaution\n\n\nYou should only us this event for logging purposes. Do not perform any actions on it.\n\n\n\n\nData Properties\n\n\nThis event has no available properties.\n\n\nExample\n\n\nlocal\n \nfunction\n \nonUnkownEvent\n()\n\n  \nprint\n(\n'An unknown event was received'\n)\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnUnknownEvent'\n,\n \nonUnkownEvent\n)\n\n\n\n\n\n\n\n\nOnWhisper\n\n\nA private message has been received.\n\n\n\n\nNote\n\n\nThis message will only be received by its intended recipient.\n\n\n\n\nData Properties\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nname\n\n\nName of the sender.\n\n\nString\n\n\n\n\n\n\nid\n\n\nUnique ID of the sender.\n\n\nString\n\n\n\n\n\n\nmsg\n\n\nThe message content.\n\n\nString\n\n\n\n\n\n\nroom\n\n\nThe current room name.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nfunction\n \nonWhisper\n(\n \nevt\n \n)\n\n  \nprint\n(\nevt\n.\ndata\n.\nname\n,\n \nevt\n.\ndata\n.\nmsg\n)\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnWhisper'\n,\n \nonWhisper\n)",
            "title": "Client Events"
        },
        {
            "location": "/events/#event-table",
            "text": "A complete listing of Coronium ChatterBox events:     Event Name  Description  Scope      OnConnect  The client has connected to the server.  client    OnJoined  A client has joined the current room.  room    OnLeft  A client has left the current room.  room    OnMessage  A room message has been received.  room    OnWhisper  A private message has been received.  client    OnSystemMessage  A system message has been received.  room    OnClientList  The client list of the current room.  room    OnRoomList  A list of rooms active on the server.  client    OnNameChange  A client has changed their name.  room    OnUnknownEvent  An unknown event has been received.  client    OnClosed  The client has disconnected from the server.  client    OnTimeout  The client connection has timed out.  client    OnError  The client has received an error message.  client",
            "title": "Event Table"
        },
        {
            "location": "/events/#event-listeners",
            "text": "To listen for events, add an event listener:  local   function   onMessage (   evt   ) \n   print ( evt . data . name ,   evt . data . msg )  end  cb . events : addEventListener ( 'OnMessage' ,   onMessage )    Note  All event properties can be found on the  data  object of the event ( evt.data.<prop> ). See the following event details for their available properties.",
            "title": "Event Listeners"
        },
        {
            "location": "/events/#onclientlist",
            "text": "The client has received the client list for the current room.  Data Properties     Property  Description  Type      clients  A table array of clients.  Table    cnt  The client list count.  Number    room  The current room name.  String     Example  local   function   onClientList (   evt   ) \n   print ( 'client count:' .. evt . data . cnt ) \n   local   clients   =   evt . data . clients \n   for   i = 1 ,   # clients   do \n     local   client   =   clients [ i ] \n     print ( client . name ,   client . id ) \n   end  end  cb . events : addEventListener ( 'OnClientList' ,   onClientList )",
            "title": "OnClientList"
        },
        {
            "location": "/events/#onclosed",
            "text": "The client has been disconnected from the server.  Data Properties  This event has no available properties.  local   function   onClosed () \n   print ( 'Client has disconnected from the server' )  end  cb . events : addEventListener ( 'OnClosed' ,   onClosed )",
            "title": "OnClosed"
        },
        {
            "location": "/events/#onconnect",
            "text": "The client has connected to the server.  Data Properties  This event has no available properties.  Example  local   function   onConnect () \n   print ( 'Client has successfully connected to the server' )  end  cb . events : addEventListener ( 'OnConnect' ,   onConnect )",
            "title": "OnConnect"
        },
        {
            "location": "/events/#onerror",
            "text": "The client has received an error message.   Note  The  OnError  event triggers on both local and server-side errors.    Important  The  OnError  event does not contain a  data  property. To access the error, use the  error  key directly on the event:  evt.error .   Example  local   function   OnError (   evt   ) \n   print ( 'Client Error: ' .. evt . error )  end  cb . events : addEventListener ( 'OnError' ,   onError )",
            "title": "OnError"
        },
        {
            "location": "/events/#onjoined",
            "text": "A client has joined the current room.  Data Properties     Property  Description  Type      name  Name of the joining client.  String    id  Unique ID of the client.  String    room  The current room name.  String     Example  local   function   onJoined (   evt   ) \n   print ( evt . data . name ,   evt . data . id ,   evt . data . room )  end  cb . events : addEventListener ( 'OnJoined' ,   onJoined )",
            "title": "OnJoined"
        },
        {
            "location": "/events/#onleft",
            "text": "A client has left the current room.  Data Properties     Property  Description  Type      name  Name of the joining client.  String    id  Unique ID of the client.  String    room  The current room name.  String     Example  local   function   onLeft (   evt   ) \n   print ( evt . data . name ,   evt . data . id ,   evt . data . room )  end  cb . events : addEventListener ( 'OnLeft' ,   onLeft )",
            "title": "OnLeft"
        },
        {
            "location": "/events/#onmessage",
            "text": "A room message has been received.  Data Properties     Property  Description  Type      name  Name of the sender.  String    id  Unique ID of the sender.  String    msg  The message content.  String    room  The current room name.  String     Example  local   function   onMessage (   evt   ) \n   print ( evt . data . name ,   evt . data . msg )  end  cb . events : addEventListener ( 'OnMessage' ,   onMessage )",
            "title": "OnMessage"
        },
        {
            "location": "/events/#onnamechange",
            "text": "A client has changed their display name.   Note  After this event is received an  OnClientList  event will follow with the updated name, allowing for easy updating of the client display list.   Data Properties     Property  Description  Type      name  New name of the client.  String    old_name  Previous name of the client.  String    id  Unique ID of the client.  String    room  The current room name.  String     Example  local   function   onNameChange (   evt   ) \n   print ( 'Old name was: ' .. evt . data . old_name ) \n   print ( 'New name is: ' .. evt . data . name )  end  cb . events : addEventListener ( 'OnNameChange' ,   onNameChange )",
            "title": "OnNameChange"
        },
        {
            "location": "/events/#onroomlist",
            "text": "A list of active rooms on the server.  Data Properties     Property  Description  Type      rooms  A table array of rooms names.  String    cnt  The client list count.  String    room  The current room name.  String     Example  local   function   onRoomList (   evt   ) \n   print ( 'room count:' .. evt . data . cnt ) \n   local   rooms   =   evt . data . rooms \n   for   i = 1 ,   # rooms   do \n     print ( rooms [ i ]. name ) \n   end  end  cb . events : addEventListener ( 'onRoomList' ,   onRoomList )",
            "title": "OnRoomList"
        },
        {
            "location": "/events/#onsystemmessage",
            "text": "A system message has been received.   Note  A system message can be used to broadcast a message for service related events outside of the \"chat\" layer.   Data Properties     Property  Description  Type      action  The system event action ID.  String    payload  The system event payload.  Table    room  The current room name.  String     Example  local   function   onSystemMessage (   evt   ) \n   if   evt . data . action   ==   'player_turn'   then \n     print ( 'players turn is: ' .. evt . data . payload ) \n   end  end  cb . events : addEventListener ( 'OnSystemMessage' ,   onSystemMessage )",
            "title": "OnSystemMessage"
        },
        {
            "location": "/events/#ontimeout",
            "text": "The client has timed out.   Important  The timeout event is only a status message and does not disconnect the client. When the client receives this message you should use the  disconnect  action to close the connection, if wanted.   Data Properties  This event has no available properties.  Example  local   function   onTimeout () \n   print ( 'The client has timed out' ) \n\n   --if you'd like to disconnect on a timeout event: \n   cs : disconnect ()  end  cb . events : addEventListener ( 'OnTimeout' ,   onTimeout )",
            "title": "OnTimeout"
        },
        {
            "location": "/events/#onunknownevent",
            "text": "An unknown event type was received by the client.   Caution  You should only us this event for logging purposes. Do not perform any actions on it.   Data Properties  This event has no available properties.  Example  local   function   onUnkownEvent () \n   print ( 'An unknown event was received' )  end  cb . events : addEventListener ( 'OnUnknownEvent' ,   onUnkownEvent )",
            "title": "OnUnknownEvent"
        },
        {
            "location": "/events/#onwhisper",
            "text": "A private message has been received.   Note  This message will only be received by its intended recipient.   Data Properties     Property  Description  Type      name  Name of the sender.  String    id  Unique ID of the sender.  String    msg  The message content.  String    room  The current room name.  String     Example  local   function   onWhisper (   evt   ) \n   print ( evt . data . name ,   evt . data . msg )  end  cb . events : addEventListener ( 'OnWhisper' ,   onWhisper )",
            "title": "OnWhisper"
        },
        {
            "location": "/actions/",
            "text": "Action Table\n\n\nA complete listing of Coronium ChatterBox actions:\n\n\n\n\n\n\n\n\nAction Name\n\n\nDescription\n\n\nScope\n\n\n\n\n\n\n\n\n\n\njoinRoom\n\n\nJoin a room.\n\n\nclient\n\n\n\n\n\n\nsendMessage\n\n\nSend a message to the room.\n\n\nroom\n\n\n\n\n\n\nsendWhisper\n\n\nSend a private message to a client.\n\n\nclient\n\n\n\n\n\n\nsendSystemMessage\n\n\nSend a system message to the room.\n\n\nroom\n\n\n\n\n\n\nchangeName\n\n\nChange the client name.\n\n\nclient\n\n\n\n\n\n\ngetRoomList\n\n\nGet a list of active rooms from the server.\n\n\nclient\n\n\n\n\n\n\ngetId\n\n\nGet the client unique ID.\n\n\nclient\n\n\n\n\n\n\ngetName\n\n\nGet the client name.\n\n\nclient\n\n\n\n\n\n\ndisconnect\n\n\nDisconnect the client from the server.\n\n\nclient\n\n\n\n\n\n\n\n\n\n\nchangeName\n\n\nChange the client name.\n\n\nAction Parameters\n\n\n\n\n\n\n\n\nParameters\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe new client name.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\ncb\n:\nchangeName\n(\n \n'Marco'\n \n)\n\n\n\n\n\n\nSee also:\n \nOnNameChange\n event.\n\n\n\n\ndisconnect\n\n\nDisconnect the client from the server.\n\n\nAction Parameters\n\n\nThis action has no parameters.\n\n\nExample\n\n\ncb\n:\ndisconnect\n()\n\n\n\n\n\n\nSee also:\n \nOnClosed\n event.\n\n\n\n\ngetId\n\n\nGet the clients unique identifier.\n\n\nAction Parameters\n\n\nThis action has no parameters.\n\n\nExample\n\n\nlocal\n \nid\n \n=\n \ncb\n:\ngetId\n()\n\n\n\n\n\n\n\n\ngetRoomList\n\n\nGet a list of active rooms from the server.\n\n\nAction Parameters\n\n\nThis action has no parameters.\n\n\nExample\n\n\nlocal\n \nname\n \n=\n \ncb\n:\ngetRoomList\n()\n\n\n\n\n\n\nSee also:\n \nOnRoomList\n event.\n\n\n\n\ngetName\n\n\nGet the clients name.\n\n\nAction Parameters\n\n\nThis action has no parameters.\n\n\nExample\n\n\nlocal\n \nname\n \n=\n \ncb\n:\ngetName\n()\n\n\n\n\n\n\n\n\njoinRoom\n\n\nJoin a room.\n\n\n\n\nNote\n\n\nA client can only be connected to one room at a time. When joining a new room, the client will automatically leave the previous room.\n\n\n\n\nAction Parameters\n\n\n\n\n\n\n\n\nParameters\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nroom\n\n\nThe room ID to join.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\ncb\n:\njoinRoom\n(\n \n'GameOne'\n \n)\n\n\n\n\n\n\nSee also:\n \nOnJoined\n event.\n\n\n\n\nsendMessage\n\n\nSend a message to the room.\n\n\n\n\nWarning\n\n\nDo not use the reserved sequence \n//\n (two forward slashes) in your message body.\n\n\n\n\n\n\nImportant\n\n\nThe message body must be of type \nString\n.\n\n\n\n\nAction Parameters\n\n\n\n\n\n\n\n\nParameters\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nThe message content.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\ncb\n:\nsendMessage\n(\n \n'Hello people!'\n \n)\n\n\n\n\n\n\nSee also:\n \nOnMessage\n event.\n\n\n\n\nsendSystemMessage\n\n\nSend a system message to the room.\n\n\n\n\nWarning\n\n\nPayload data cannot contain \n\\n\n (newline) characters.\n\n\n\n\nAction Parameters\n\n\n\n\n\n\n\n\nParameters\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\naction\n\n\nThe system action ID.\n\n\nString\n\n\n\n\n\n\npayload\n\n\nThe action payload.\n\n\nTable\n\n\n\n\n\n\n\n\nExample\n\n\ncb\n:\nsendSystemMessage\n(\n \n'player_turn'\n,\n \n{\nturn\n \n=\n \n1\n}\n \n)\n\n\n\n\n\n\nSee also:\n \nOnSystemMessage\n event.\n\n\n\n\nsendWhisper\n\n\nSend a private message to a client.\n\n\n\n\nWarning\n\n\nDo not use the reserved sequence \n//\n (two forward slashes) in your message body.\n\n\n\n\n\n\nImportant\n\n\nThe message body must be of type \nString\n.\n\n\n\n\nAction Parameters\n\n\n\n\n\n\n\n\nParameters\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nThe message content.\n\n\nString\n\n\n\n\n\n\nto_id\n\n\nThe recipient ID.\n\n\nString\n\n\n\n\n\n\n\n\nExample\n\n\ncb\n:\nsendWhisper\n(\n \n'Hello you!'\n,\n \n'b697869e-5e07-4a91-89bd-1c737123cae2'\n \n)\n\n\n\n\n\n\n\n\nNote\n\n\nYou can obtain a recipient ID from the client list. See the \nOnClientList\n event.\n\n\n\n\nSee also:\n \nOnWhisper\n event.",
            "title": "Client Actions"
        },
        {
            "location": "/actions/#action-table",
            "text": "A complete listing of Coronium ChatterBox actions:     Action Name  Description  Scope      joinRoom  Join a room.  client    sendMessage  Send a message to the room.  room    sendWhisper  Send a private message to a client.  client    sendSystemMessage  Send a system message to the room.  room    changeName  Change the client name.  client    getRoomList  Get a list of active rooms from the server.  client    getId  Get the client unique ID.  client    getName  Get the client name.  client    disconnect  Disconnect the client from the server.  client",
            "title": "Action Table"
        },
        {
            "location": "/actions/#changename",
            "text": "Change the client name.  Action Parameters     Parameters  Description  Type      name  The new client name.  String     Example  cb : changeName (   'Marco'   )   See also:   OnNameChange  event.",
            "title": "changeName"
        },
        {
            "location": "/actions/#disconnect",
            "text": "Disconnect the client from the server.  Action Parameters  This action has no parameters.  Example  cb : disconnect ()   See also:   OnClosed  event.",
            "title": "disconnect"
        },
        {
            "location": "/actions/#getid",
            "text": "Get the clients unique identifier.  Action Parameters  This action has no parameters.  Example  local   id   =   cb : getId ()",
            "title": "getId"
        },
        {
            "location": "/actions/#getroomlist",
            "text": "Get a list of active rooms from the server.  Action Parameters  This action has no parameters.  Example  local   name   =   cb : getRoomList ()   See also:   OnRoomList  event.",
            "title": "getRoomList"
        },
        {
            "location": "/actions/#getname",
            "text": "Get the clients name.  Action Parameters  This action has no parameters.  Example  local   name   =   cb : getName ()",
            "title": "getName"
        },
        {
            "location": "/actions/#joinroom",
            "text": "Join a room.   Note  A client can only be connected to one room at a time. When joining a new room, the client will automatically leave the previous room.   Action Parameters     Parameters  Description  Type      room  The room ID to join.  String     Example  cb : joinRoom (   'GameOne'   )   See also:   OnJoined  event.",
            "title": "joinRoom"
        },
        {
            "location": "/actions/#sendmessage",
            "text": "Send a message to the room.   Warning  Do not use the reserved sequence  //  (two forward slashes) in your message body.    Important  The message body must be of type  String .   Action Parameters     Parameters  Description  Type      message  The message content.  String     Example  cb : sendMessage (   'Hello people!'   )   See also:   OnMessage  event.",
            "title": "sendMessage"
        },
        {
            "location": "/actions/#sendsystemmessage",
            "text": "Send a system message to the room.   Warning  Payload data cannot contain  \\n  (newline) characters.   Action Parameters     Parameters  Description  Type      action  The system action ID.  String    payload  The action payload.  Table     Example  cb : sendSystemMessage (   'player_turn' ,   { turn   =   1 }   )   See also:   OnSystemMessage  event.",
            "title": "sendSystemMessage"
        },
        {
            "location": "/actions/#sendwhisper",
            "text": "Send a private message to a client.   Warning  Do not use the reserved sequence  //  (two forward slashes) in your message body.    Important  The message body must be of type  String .   Action Parameters     Parameters  Description  Type      message  The message content.  String    to_id  The recipient ID.  String     Example  cb : sendWhisper (   'Hello you!' ,   'b697869e-5e07-4a91-89bd-1c737123cae2'   )    Note  You can obtain a recipient ID from the client list. See the  OnClientList  event.   See also:   OnWhisper  event.",
            "title": "sendWhisper"
        },
        {
            "location": "/development/",
            "text": "Event Listeners\n\n\nEvents can be registered to different listeners to take action on them. In almost all cases, there should only be one listener for an event at any given time. This means you will need to be mindful of \"removing\" a listener when appropiate.\n\n\nTo remove an event listener use \nremoveEventListener\n:\n\n\ncb\n.\nevents\n:\nremoveEventListener\n(\n'OnJoined'\n,\n \nonJoined\n)\n\n\n\n\n\n\nYou should always be listening for the \nOnClientList\n and \nOnClosed\n event throughout your application while connected to your instance. The \nOnClientList\n event provides a syncing point for the clients currently connected to the room. This event is trigged when a client joins, leaves, or makes a name change in the room. \nIf you're not listening for this event, you will not know what the current state of the room is.\n\n\nThe \nOnClosed\n event is important for clean up associated with a client disconnecting from the server.\n\n\nThe \nOnJoined\n and \nOnLeft\n events are helpful for cleaning up client specfic state.\n\n\n\n\nTip\n\n\nDon't try to manage your client list using the \nOnJoined\n and \nOnLeft\n events. Instead listen for the \nOnClientList\n event to keep your client list current.\n\n\n\n\nClient Names\n\n\nWhen a client connects to a room, it's possible for two (or more) clients to have the same name. A clients name can be changed with the \nchangeName\n action. If you want to impose unique names, you can write logic in the \nOnJoined\n event to check the client list for a matching name, and prompt the user to change their name.\n\n\nSystem Messages\n\n\nSystem messages can facilitate more complex applications. A system message contains two properties, an \naction\n and \npayload\n. Using this message type allows you to control your application without having to parse through \"chat\" based messages.\n\n\nThe \naction\n property should be a unique key that you can check for on the \nOnSystemMessage\n event. The \npayload\n is any data required for that action. It can be a simple value, or a complex data table.\n\n\nBy listening for system messages, and checking the \naction\n key you can implement limitless functionality:\n\n\nlocal\n \ncb\n \n=\n \nrequire\n(\n'chatterbox.client'\n)\n\n\n\nlocal\n \nfunction\n \nonSystemMessage\n(\n \nevt\n \n)\n\n  \nlocal\n \naction\n \n=\n \nevt\n.\naction\n\n  \nlocal\n \npayload\n \n=\n \nevt\n.\npayload\n\n\n  \nif\n \naction\n \n==\n \n'open_broswer'\n \nthen\n\n    \n--possible function, payload is a data table\n\n    \nopenWebView\n(\npayload\n.\nurl\n)\n\n  \nelseif\n \naction\n \n==\n \n'flash_screen'\n \nthen\n\n    \n--possible function, payload contains a number\n\n    \nflashScreen\n({\nrepeat\n=\npayload\n})\n\n  \nend\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnSystemMessage'\n,\n \nonSystemMessage\n)\n\n\n\n\n\n\n\n\nImportant\n\n\nSystem messages are always broadcast to the entire room. If you want an event to only operate on a specific client, pass the clients ID along in the payload and check against it.\n\n\n\n\nActing on a specific client:\n\n\nlocal\n \ncb\n \n=\n \nrequire\n(\n'chatterbox.client'\n)\n\n\n\nlocal\n \nfunction\n \nonSystemMessage\n(\n \nevt\n \n)\n\n  \nlocal\n \naction\n \n=\n \nevt\n.\naction\n\n  \nlocal\n \npayload\n \n=\n \nevt\n.\npayload\n \n--a data table\n\n\n  \nif\n \naction\n \n==\n \n'set_score'\n \nthen\n\n    \nif\n \npayload\n.\nclient_id\n \n==\n \ncs\n:\ngetId\n()\n \nthen\n\n      \nclient_score\n \n=\n \npayload\n.\nscore\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnSystemMessage'\n,\n \nonSystemMessage\n)\n\n\n\n\n\n\nYou can also sync application state by passing a data table as the \npayload\n:\n\n\n...\n\n\n\nlocal\n \nfunction\n \nonSystemMessage\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\naction\n \n==\n \n'state'\n \nthen\n\n    \napp_state\n \n=\n \nevt\n.\npayload\n\n    \n--do stuff with the app_state\n\n  \nend\n\n\nend\n\n\n\n...",
            "title": "Development Tips"
        },
        {
            "location": "/development/#event-listeners",
            "text": "Events can be registered to different listeners to take action on them. In almost all cases, there should only be one listener for an event at any given time. This means you will need to be mindful of \"removing\" a listener when appropiate.  To remove an event listener use  removeEventListener :  cb . events : removeEventListener ( 'OnJoined' ,   onJoined )   You should always be listening for the  OnClientList  and  OnClosed  event throughout your application while connected to your instance. The  OnClientList  event provides a syncing point for the clients currently connected to the room. This event is trigged when a client joins, leaves, or makes a name change in the room.  If you're not listening for this event, you will not know what the current state of the room is.  The  OnClosed  event is important for clean up associated with a client disconnecting from the server.  The  OnJoined  and  OnLeft  events are helpful for cleaning up client specfic state.   Tip  Don't try to manage your client list using the  OnJoined  and  OnLeft  events. Instead listen for the  OnClientList  event to keep your client list current.",
            "title": "Event Listeners"
        },
        {
            "location": "/development/#client-names",
            "text": "When a client connects to a room, it's possible for two (or more) clients to have the same name. A clients name can be changed with the  changeName  action. If you want to impose unique names, you can write logic in the  OnJoined  event to check the client list for a matching name, and prompt the user to change their name.",
            "title": "Client Names"
        },
        {
            "location": "/development/#system-messages",
            "text": "System messages can facilitate more complex applications. A system message contains two properties, an  action  and  payload . Using this message type allows you to control your application without having to parse through \"chat\" based messages.  The  action  property should be a unique key that you can check for on the  OnSystemMessage  event. The  payload  is any data required for that action. It can be a simple value, or a complex data table.  By listening for system messages, and checking the  action  key you can implement limitless functionality:  local   cb   =   require ( 'chatterbox.client' )  local   function   onSystemMessage (   evt   ) \n   local   action   =   evt . action \n   local   payload   =   evt . payload \n\n   if   action   ==   'open_broswer'   then \n     --possible function, payload is a data table \n     openWebView ( payload . url ) \n   elseif   action   ==   'flash_screen'   then \n     --possible function, payload contains a number \n     flashScreen ({ repeat = payload }) \n   end  end  cb . events : addEventListener ( 'OnSystemMessage' ,   onSystemMessage )    Important  System messages are always broadcast to the entire room. If you want an event to only operate on a specific client, pass the clients ID along in the payload and check against it.   Acting on a specific client:  local   cb   =   require ( 'chatterbox.client' )  local   function   onSystemMessage (   evt   ) \n   local   action   =   evt . action \n   local   payload   =   evt . payload   --a data table \n\n   if   action   ==   'set_score'   then \n     if   payload . client_id   ==   cs : getId ()   then \n       client_score   =   payload . score \n     end \n   end  end  cb . events : addEventListener ( 'OnSystemMessage' ,   onSystemMessage )   You can also sync application state by passing a data table as the  payload :  ...  local   function   onSystemMessage (   evt   ) \n   if   evt . action   ==   'state'   then \n     app_state   =   evt . payload \n     --do stuff with the app_state \n   end  end  ...",
            "title": "System Messages"
        },
        {
            "location": "/example/",
            "text": "main.lua\n\n\nWhat follows is a complete set up of all \nCoronium ChatterBox\n events and associated listeners.\n\n\nTo learn more about the properties contained in each event see \nClient Events\n.\n\n\n\n\nlocal\n \ncb\n \n=\n \nrequire\n(\n'plugin.chatterbox'\n)\n\n\n\n--#############################################################\n\n\n--# Listeners\n\n\n--#############################################################\n\n\n\nlocal\n \nfunction\n \nonConnect\n()\n\n  \nprint\n(\n'Connected'\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonJoined\n(\n \nevt\n \n)\n\n  \nprint\n(\n'Client Joined'\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonLeft\n(\n \nevt\n \n)\n\n  \nprint\n(\n'Client Left'\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonMessage\n(\n \nevt\n \n)\n\n  \nprint\n(\n'Got Message'\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonWhisper\n(\n \nevt\n \n)\n\n  \nprint\n(\n'Got Whisper'\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonSystemMessage\n(\n \nevt\n \n)\n\n  \nprint\n(\n'Got System Message'\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonClientList\n(\n \nevt\n \n)\n\n  \nprint\n(\n'Got Client List'\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonRoomList\n(\n \nevt\n \n)\n\n  \nprint\n(\n'Got Room List'\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonNameChange\n(\n \nevt\n \n)\n\n  \nprint\n(\n'Name Changed'\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonUnknownEvent\n(\n \nevt\n \n)\n\n  \nprint\n(\n'Unknown Event'\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonTimeout\n()\n\n  \nprint\n(\n'Timed Out'\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonClosed\n()\n\n  \nprint\n(\n'Disconnected'\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nonError\n(\n \nevt\n \n)\n\n  \nprint\n(\n'Error'\n)\n\n\nend\n\n\n\n--#############################################################\n\n\n--# Events\n\n\n--#############################################################\n\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnConnect'\n,\n \nonConnect\n)\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnJoined'\n,\n \nonJoined\n)\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnLeft'\n,\n \nonLeft\n)\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnMessage'\n,\n \nonMessage\n)\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnWhisper'\n,\n \nonWhisper\n)\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnSystemMessage'\n,\n \nonSystemMessage\n)\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnClientList'\n,\n \nonClientList\n)\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnRoomList'\n,\n \nonRoomList\n)\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnNameChange'\n,\n \nonNameChange\n)\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnUnknownEvent'\n,\n \nonUnknownEvent\n)\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnClosed'\n,\n \nonClosed\n)\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnTimeout'\n,\n \nonTimeout\n)\n\n\ncb\n.\nevents\n:\naddEventListener\n(\n'OnError'\n,\n \nonError\n)\n\n\n\ncb\n:\nconnect\n({\n\n  \nhost\n  \n=\n \n'<your-instance-ip>'\n,\n\n  \nkey\n   \n=\n \n'<your-instance-key>'\n,\n \n  \nname\n  \n=\n \n\"Timmy\"\n\n\n})",
            "title": "Example Setup"
        },
        {
            "location": "/example/#mainlua",
            "text": "What follows is a complete set up of all  Coronium ChatterBox  events and associated listeners.  To learn more about the properties contained in each event see  Client Events .   local   cb   =   require ( 'plugin.chatterbox' )  --#############################################################  --# Listeners  --#############################################################  local   function   onConnect () \n   print ( 'Connected' )  end  local   function   onJoined (   evt   ) \n   print ( 'Client Joined' )  end  local   function   onLeft (   evt   ) \n   print ( 'Client Left' )  end  local   function   onMessage (   evt   ) \n   print ( 'Got Message' )  end  local   function   onWhisper (   evt   ) \n   print ( 'Got Whisper' )  end  local   function   onSystemMessage (   evt   ) \n   print ( 'Got System Message' )  end  local   function   onClientList (   evt   ) \n   print ( 'Got Client List' )  end  local   function   onRoomList (   evt   ) \n   print ( 'Got Room List' )  end  local   function   onNameChange (   evt   ) \n   print ( 'Name Changed' )  end  local   function   onUnknownEvent (   evt   ) \n   print ( 'Unknown Event' )  end  local   function   onTimeout () \n   print ( 'Timed Out' )  end  local   function   onClosed () \n   print ( 'Disconnected' )  end  local   function   onError (   evt   ) \n   print ( 'Error' )  end  --#############################################################  --# Events  --#############################################################  cb . events : addEventListener ( 'OnConnect' ,   onConnect )  cb . events : addEventListener ( 'OnJoined' ,   onJoined )  cb . events : addEventListener ( 'OnLeft' ,   onLeft )  cb . events : addEventListener ( 'OnMessage' ,   onMessage )  cb . events : addEventListener ( 'OnWhisper' ,   onWhisper )  cb . events : addEventListener ( 'OnSystemMessage' ,   onSystemMessage )  cb . events : addEventListener ( 'OnClientList' ,   onClientList )  cb . events : addEventListener ( 'OnRoomList' ,   onRoomList )  cb . events : addEventListener ( 'OnNameChange' ,   onNameChange )  cb . events : addEventListener ( 'OnUnknownEvent' ,   onUnknownEvent )  cb . events : addEventListener ( 'OnClosed' ,   onClosed )  cb . events : addEventListener ( 'OnTimeout' ,   onTimeout )  cb . events : addEventListener ( 'OnError' ,   onError )  cb : connect ({ \n   host    =   '<your-instance-ip>' , \n   key     =   '<your-instance-key>' ,  \n   name    =   \"Timmy\"  })",
            "title": "main.lua"
        },
        {
            "location": "/demo/",
            "text": "You can find the demo files here: \nhttps://github.com/develephant/coronium-chatterbox-demo\n\n\n\n\nScreencast\n\n\nLearn how to use the demo while viewing a screencast by \nclicking here\n.",
            "title": "Demo"
        },
        {
            "location": "/about/",
            "text": "Code and documentation \u00a92017 C. Byerley (\ndevelephant\n).",
            "title": "About"
        }
    ]
}